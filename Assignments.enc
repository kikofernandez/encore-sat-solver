module Assignments

import Vector
import Clause
import Array
import LocalArray

local class Variable
  -- public attributes
  var value : int
  var dL : int
  var setByBranching : bool
  var guessedValue : int
  var visited : bool

  def init() : unit
    this.value = -1
    this.dL = -1
    this.setByBranching = false
    this.guessedValue = -1
    this.visited = false
  end

  def toString() : unit
    println("Value: {}, dL: {}, setByBranching: {}, guessedValue: {}, visited: {}", this.value, this.dL, this.setByBranching, this.guessedValue, this.visited)
  end
end

local class Assignments
  -- public attributes
  var nSetVars : int

  -- private attributes
  val variables : LocalArray[Variable]

  def init(n : int, varsToAssign : RArray[int]) : unit
    this.nSetVars = 0
    this.variables = new LocalArray[Variable](n)
    repeat i <- n do
      this.variables.set(i, new Variable())
    end
    repeat i <- varsToAssign.size() do
      this.guessVariable(varsToAssign.at(i), 1, -1, false)
    end
  end

  -- public methods
  def assignVariable(index :  int, value : int, dL : int, setByBranching : bool) : unit
    var vara = this.variables.at(index)
    if vara.value == -1 then
      vara.value = value
      vara.dL = dL
      vara.setByBranching = setByBranching
    else
      println("Assign variable error, index {} already has a value.", index)
      vara.toString()
      abort("")
    end
    this.nSetVars = this.nSetVars + 1
  end

  def getVariables() : LocalArray[Variable]
    val newVars = new LocalArray[Variable](this.variables.size()/2)
    var j = 0
    repeat i <- this.variables.size() do
      if i % 2 == 0 then
        newVars.set(j, this.variables.at(i))
        j += 1
      end
    end
    newVars
  end

  def resetVar(index : int) : unit
    var var1 = this.variables.at(index * 2)
    var var2 = this.variables.at(index * 2 + 1)
    if var1.value != -1 then
      this.nSetVars = this.nSetVars - 1
    end
    if var2.value != -1 then
      this.nSetVars = this.nSetVars - 1
    end
    reset(var1)
    reset(var2)
  where
    fun reset(vari : Variable) : unit -- TODO: move to Variable
      vari.value = -1
      vari.dL = -1
      vari.setByBranching = false
      vari.guessedValue = -1
    end
  end

  def assignCounterpart(index : int) : unit
    var index2 = index
    if (index % 2 == 0) then
      index2 = index2 + 1
    else
      index2 = index2 - 1
    end
    var var1 = this.variables.at(index)
    var var2 = this.variables.at(index2)
    if var2.value == -1 then
      var2.value = var1.value
      var2.dL = var1.dL
      var2.setByBranching = var1.setByBranching
    else
      println("Assign counterpart error, variable index {} already has a value.", index2)
      var2.toString()
      abort("")
    end
    this.nSetVars = this.nSetVars + 1
  end

  def guessVariable(index :  int, value : int, dL : int, setByBranching : bool = false) : unit
    -- TODO: precondition: this.variables.size() >= (index*2)+1
    val index1 = index*2
    val index2 = index1+1
    val var1 = this.variables.at(index1)
    val var2 = this.variables.at(index2)
    if var1.value == -1 && var2.value == -1 then
      var1.value = value
      var2.value = value
      var1.dL = dL
      var2.dL = dL
      var1.setByBranching = true
      var2.setByBranching = true
    else
      println("Guess variable error, variable index {} already has a value.", index2)
      var1.toString()
      var2.toString()
      abort("")
    end
    this.nSetVars = this.nSetVars + 2
  end

  def finalAssignment() : FinalAssignment
    new FinalAssignment(this.variables)
  end

  def convertClauseToConflictClause(clause : Clause) : Clause
    val size = clause.literals.size()
    var conflictLiterals = new Array[int](size)
    repeat j <- size do
      var literal = clause.literals.at(j)
      if this.variables.at(literal).value == 0 then
        if literal % 2 == 1 then
          literal -= 1
        end
      else
        if literal % 2 == 0 then
          literal += 1
        end
      end
      conflictLiterals.set(j, literal)
    end
    new Clause(consume conflictLiterals)
  end
end


read class FinalAssignment
  val assignment : RArray[int]

  def init(vars : LocalArray[Variable]) : unit
    var res = new Array[int](vars.size())
    repeat i <- vars.size() do
      res.set(i, vars.at(i).value)
    end
    this.assignment = consume res
  end

  def toString() : unit
    print("Assignments: ")
    repeat i <- this.assignment.size() do
      if this.assignment.at(i) == 0 then
        print("{}", "-")
      else if this.assignment.at(i) == -1 then
        print("{}", "UNSAT")
      end
      print("x{} ", i+1)
      if ((i + 1) * 2) % 5 == 0 then
        println("")
      end
    end
    println("")
  end
end
