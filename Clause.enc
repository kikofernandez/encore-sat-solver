module Clause

import Vector
import Array

read class Clause
-- public attributes
  val literals : RArray[int]

  def init(literals_ : RArray[int]) : unit
    this.literals = literals_
  end

-- public methods
  -- DEBUG method
  def toString() : unit
    print("Clause: {}","")
    repeat i <- this.literals.size() do
      print("{}", this.literals.at(i)/2+1)
      if (this.literals.at(i)%2 == 1) then
        print("' {}", "")
      else
        print(" {}","")
      end
    end
    println("")
  end

  -- TODO: avoid double copy
  def toConflictClause() : Clause
    val conflictLiterals = new Vector[int](this.literals.size())
    repeat i <- this.literals.size() do
      if (this.literals.at(i) % 2 == 0) then
        conflictLiterals.push(this.literals.at(i)+1)
      else
        conflictLiterals.push(this.literals.at(i)-1)
      end
    end
    new Clause(conflictLiterals.toRArray())
  end

  -- TODO: replace |clause.literals| by clause.size(), everywhere
  def size() : int
    this.literals.size()
  end
end
