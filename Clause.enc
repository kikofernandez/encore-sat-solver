module Clause

import Vector
import Array

read class Clause
-- public attributes
  val literals : RArray[int]

  def init(literals_ : RArray[int]) : unit
    this.literals = literals_
  end

-- public methods
  def toString() : unit
    print("Clause: {}","")
    repeat i <- this.literals.size() do
      print("{}", this.literals.at(i)/2+1)
      if (this.literals.at(i)%2 == 1) then
        print("' {}", "")
      else
        print(" {}","")
      end
    end
    println("")
  end

  def toConflictClause() : Clause
    var conflictLiterals = new Array[int](this.literals.size())
    repeat i <- this.literals.size() do
      val c = this.literals.at(i)
      if (this.literals.at(i) % 2 == 0) then
        conflictLiterals.set(i, c+1)
      else
        conflictLiterals.set(i, c-1)
      end
    end
    new Clause(consume conflictLiterals)
  end

  def size() : int
    this.literals.size()
  end
end
