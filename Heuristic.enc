module Heuristic

import Assignments (Variable)
import Clause (Clause)
import VVector (RVector)
import Vector (Vector)
import LocalArray (LocalArray)
import Array (RArray)
import ValueSelection (TValueSelection)
import VariableSelection (TVariableSelection)

linear class Heuristic
  val valueSelection : TValueSelection
  val variableSelection : TVariableSelection
  val branchOnVariable : bool

  val vsidsCounters : [real]
  val vsidsMax : int -- How many new clauses before decaying variables
  var vsidsCounter : int

  def init(valueSelection : TValueSelection,
           variableSelection : TVariableSelection,
           nVars : int,
           clauses : RVector[Clause]) : unit
    this.variableSelection = variableSelection
    this.valueSelection = valueSelection

    checkCorrectness(variableSelection, valueSelection)

    if (variableSelection.isVsid()) then -- VSIDS
      this.vsidsCounter = 0
      this.vsidsMax = 50
      this.vsidsCounters = new [real](nVars)
      repeat i <- clauses.size() do
        val literals = clauses.at(i).literals
        repeat j <- literals.size() do
          this.vsidsCounters(literals.at(j) / 2) += 1.0
        end
      end
    end
  where
    fun checkCorrectness(variableSelection: TVariableSelection, valueSelection: TValueSelection): unit
      val varId = variableSelection.getId()
      val valId = valueSelection.getId()
      if(((varId > 1) && (varId < 4)) || (varId == 6)) then
        if(valId <  2) then
          println("Illegal combination of value '{}' and variable '{}' heuristics.",
                  valueSelection.valueSelectionToString(),
                  variableSelection.variableSelectionToString())
          abort("")
        end
      end
    end
  end

  def valueSelectionToString() : unit
    this.valueSelection.valueSelectionToString()
  end

  def getVariableSelection(variables : LocalArray[Variable],
                           clauses : Vector[Clause]) : (int,int)
   if not this.variableSelection.isVsid() then
     this.variableSelection.getVariableSelection(variables, clauses)
   else
     -- TODO: case for VSID. relies on internal state.
     --       VSID has a mutable argument, which makes it incompatible
     --       with TVariableSelection and TValueSelection trait
     var cur = 0.0
     var maxI = -1
     var max = cur
     repeat i <- |this.vsidsCounters| do
       cur = this.vsidsCounters(i)
       if ((cur >= max) && ((variables.at(i)).value == -1)) then
         max = cur
         maxI = i
       end
     end
     (maxI, -1)
   end
  end

  def variableSelectionToString() : unit
    this.variableSelection.variableSelectionToString()
  end

  def getValueSelection(literal : int) : int
    this.valueSelection.getValueSelection(literal : int)
  end

  -- Only for VSIDS
  -- TODO: ideally this would be enclosed in the VSID class.
  --       VSID has a mutable argument, which makes it incompatible
  --       with TVariableSelection and TValueSelection trait
  def addConflictClause(clause : Clause) : unit

    if (this.variableSelection.getId() == 6) then
      val literals = clause.literals
      repeat j <- literals.size() do
        this.vsidsCounters(literals.at(j) / 2) += 1.0
      end
      this.vsidsCounter += 1
      if (this.vsidsCounter == this.vsidsMax) then
        this.vsidsCounter = 0
        repeat i <- |this.vsidsCounters| do
          this.vsidsCounters(i) *= 0.5
        end
      end
    end
  end
end
