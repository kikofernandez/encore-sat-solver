module ImplicationGraph

import Vector
import Clause
import LocalArray

local class Implication
  -- public attributes
  val variableIndex : int
  val unitClause : Clause
  val dL : int
  val value : int

  def init(unitClause : Clause, dL : int, value : int, variableIndex : int) : unit
    this.unitClause = unitClause
    this.dL = dL
    this.value = value
    this.variableIndex = variableIndex
  end

  def toString() : unit
    println("Implication: value: {}, variable: {}, dL: {} ", this.value, this.variableIndex + 1, this.dL)
    this.unitClause.toString()
  end
end

local class ImplicationGraph
  val implicationGraph : LocalArray[Vector[Implication]]

  -- private attributes
  var latestConflictIndex : int

  def init(n : int) : unit
    this.latestConflictIndex = -1
    this.implicationGraph = new LocalArray[Vector[Implication]](n)
    repeat i <- n do
      this.implicationGraph.set(i, new Vector[Implication](2))
    end
  end

  -- public methods
  -- returns false if conflict is found, otherwise true
  def addImplication(clause : Clause, dL : int, value : int, index : int) : bool
    var noConflict = true
    var implicationsForVariable = this.implicationGraph.at(index)
    if implicationsForVariable.size() > 0 then
      if implicationsForVariable.at(0).value != value then
        this.latestConflictIndex = index
        noConflict = false
      end
    end
    var implication = new Implication(clause, dL, value, index)
    implicationsForVariable.push(implication)
    noConflict
  end

  def getLatestConflict() : Vector[Implication]
    this.implicationGraph.at(this.latestConflictIndex)
  end

  def toString() : unit
    println("ImplicationGraph:")
    repeat i <- this.implicationGraph.size() do
      var implications = this.implicationGraph.at(i)
      if implications.size() > 0 then
        print("variable: {} ", i + 1)
        repeat j <- implications.size() do
          val implication = implications.at(j)
          implication.toString()
        end
      end
    end
  end
end
