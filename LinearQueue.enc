module LinearQueue

fun unjust[linear t](x : Maybe[Link[t]]) : Link[t]
  match x with
    case Just(ice) => ice
    case Nothing => abort("Cannot unjust Nothing.")
  end
end

subord class Link[linear t]
  var next : Maybe[Link[t]]
  var data : Maybe[t]
end


local class LinearQueue[linear t]
-- private attributes
  var head : Maybe[Link[t]]
  var tail : Maybe[Link[t]]
  var no_elements : int

  def init() : unit
    this.head = Nothing
    this.tail = Nothing
    this.no_elements = 0
  end

-- public methods
  def is_empty() : bool
    this.no_elements == 0
  end

  def enqueue(var data : Maybe[t]) : unit
    val tail = new Link[t]()
    tail.data = consume data
    tail.next = Nothing : Maybe[Link[t]]
    if this.is_empty() then
      this.tail = Just(tail)
      this.head = this.tail
    else
      val old_tail = unjust(this.tail)
      this.tail = Just(tail)
      old_tail.next = this.tail
    end
    this.no_elements += 1
  end

  def dequeue() : Maybe[t]
    if this.is_empty() then
      Nothing
    else
      var head = unjust(consume this.head)
      var next = head.next
      this.head = next
      this.no_elements -= 1
      if this.is_empty() then
        this.tail = Nothing
      end
      consume head.data
    end
  end
end
