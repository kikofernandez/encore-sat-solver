module Main

import Vector
import VVector
import Clause
import Parser
import Solver
import Heuristic
import Util
import LinearQueue
import Array
import ValueSelection
import VariableSelection
import Assignments
import Observable
import Solution

fun unjustH(var h : Maybe[Heuristic]) : Heuristic
  EMBED (Heuristic) #{h}->val.p; END
--  match consume h with
--    case Just(ice) => ice
--    case Nothing => abort("There is no justice")
--  end
end

active class Main

  def private charToInt(c : char) : int
    if (c == '0') then
      0
    else if (c == '1') then
      1
    else if (c == '2') then
      2
    else if (c == '3') then
      3
    else if (c == '4') then
      4
    else if (c == '5') then
      5
    else if (c == '6') then
      6
    else if (c == '7') then
      7
    else if (c == '8') then
      8
    else if (c == '9') then
      9
    else
      println("Cannot convert char {} to int, exiting. ", c)
      abort("")
    end
  end

  def private stringToInt(s : String) : int
    val carr = s.to_array()
    var sum = 0
    var mul = 1
    val sign = if (carr(0) == '-') then -1 else 1 end
    val len = s.length()
    repeat i <- len do
      if ((sign == 1) || (i != len - 1)) then
          sum = sum + mul * this.charToInt(carr(len - i - 1))
          mul = mul * 10
      else
          sum = sum * sign
      end
    end
    sum
  end

  def private preProcess(clauses : RVector[Clause], nVars : int) : RArray[int]
    val exists = new Array[bool](nVars)

    var j = 0
    while (j < clauses.size()) do
      var clause = clauses.at(j)
      var k = 0
      val kLimit = clause.size()
      -- TODO: not sure what this does?
      -- Why does a clause has an array of numbers?
      while k < kLimit do
        exists.set(clause.literals.at(k) / 2,  true)
        k = k + 1
      end
      j = j + 1
    end

    val varsToAssign = new Vector[int](10)
    repeat i <- exists.size() do
      if not exists.at(i) then
        varsToAssign.push(i)
      end
    end
    varsToAssign.toRArray()
  end

  def private setupHeuristics(heuristics: LinearQueue[Heuristic],
                              clauses: RVector[Clause],
                              val nVars: int,
                              valsFactory: ValueFactory,
                              varsFactory: VariableFactory): unit

    -- value selection
    val litFalse = valsFactory.get(0)
    val litTrue = valsFactory.get(1)
    val valRandom = valsFactory.get(2)
    val varFalse = valsFactory.get(3)
    val varTrue = valsFactory.get(4)

    -- Variable Selection
    val litForwards = varsFactory.get(0)
    val litBackwards = varsFactory.get(1)
    val varForwards = varsFactory.get(2)
    val varBackwards = varsFactory.get(3)
    val largestClause = varsFactory.get(4)
    val smallestClause = varsFactory.get(5)
    val vsids = varsFactory.get(6)

    heuristics.enqueue(Just(new Heuristic(varFalse, vsids, nVars, clauses))) -- VSIDS
    heuristics.enqueue(Just(new Heuristic(litFalse, litForwards, nVars, clauses))) -- Literal false literal forward
    heuristics.enqueue(Just(new Heuristic(litFalse, smallestClause, nVars, clauses))) -- Literal false smallest
    heuristics.enqueue(Just(new Heuristic(valRandom, smallestClause, nVars, clauses))) -- Value random smallest
    heuristics.enqueue(Just(new Heuristic(varFalse, litForwards, nVars, clauses))) -- Variable false literal forward
    heuristics.enqueue(Just(new Heuristic(varFalse, litBackwards, nVars, clauses))) -- Variable false literal back
    heuristics.enqueue(Just(new Heuristic(varTrue, vsids, nVars, clauses))) -- VSIDS
    heuristics.enqueue(Just(new Heuristic(varTrue, litForwards, nVars, clauses))) -- Variable true literal forward
    heuristics.enqueue(Just(new Heuristic(valRandom, vsids, nVars, clauses))) -- VSIDS random
    heuristics.enqueue(Just(new Heuristic(varTrue, litBackwards, nVars, clauses))) -- Variable true literal back
    heuristics.enqueue(Just(new Heuristic(litTrue, largestClause, nVars, clauses))) -- Literal true largest
    heuristics.enqueue(Just(new Heuristic(litFalse, litBackwards, nVars, clauses))) -- Literal false literal back
    heuristics.enqueue(Just(new Heuristic(valRandom, litForwards, nVars, clauses))) -- Value random literal forward
    heuristics.enqueue(Just(new Heuristic(valRandom, litBackwards, nVars, clauses))) -- Value random literal back
    heuristics.enqueue(Just(new Heuristic(litFalse, largestClause, nVars, clauses))) -- Literal false largest
    heuristics.enqueue(Just(new Heuristic(litTrue, litForwards, nVars, clauses))) -- Literal true literal forward
    heuristics.enqueue(Just(new Heuristic(valRandom, varForwards, nVars, clauses))) -- Value random variable forward
    heuristics.enqueue(Just(new Heuristic(valRandom, varBackwards, nVars, clauses))) -- Value random variable back
    heuristics.enqueue(Just(new Heuristic(valRandom, largestClause, nVars, clauses))) -- Value random largest
    heuristics.enqueue(Just(new Heuristic(varFalse, varForwards, nVars, clauses))) -- Variable false variable forward
    heuristics.enqueue(Just(new Heuristic(varTrue, largestClause, nVars, clauses))) -- Variable true largest
    heuristics.enqueue(Just(new Heuristic(varFalse, varBackwards, nVars, clauses))) -- Variable false variable back
    heuristics.enqueue(Just(new Heuristic(varTrue, varForwards, nVars, clauses))) -- Variable true variable forward
    heuristics.enqueue(Just(new Heuristic(litTrue, litBackwards, nVars, clauses))) -- Literal true literal back
    heuristics.enqueue(Just(new Heuristic(litTrue, smallestClause, nVars, clauses))) -- Literal true smallest
    heuristics.enqueue(Just(new Heuristic(varFalse, smallestClause, nVars, clauses))) -- Variable false smallest
    heuristics.enqueue(Just(new Heuristic(varTrue, varBackwards, nVars, clauses))) -- Variable true variable back
    heuristics.enqueue(Just(new Heuristic(varFalse, largestClause, nVars, clauses))) -- Variable false largest
    heuristics.enqueue(Just(new Heuristic(varTrue, smallestClause, nVars, clauses))) -- Variable true smallest
  end

  def main(args : [String]) : unit
    if ((|args| == 1) || ((args(1)).equals("-h"))) then
        println("{}", "Usage: ")
        println("{}", args(0))
        println(" [-s nsolvers [-heu val1 var1 val2 var2 ...] | -i niter | -ccl len | -ccn num | -ccm num | -r restart ] filename")
        abort("")
    end

    -- setup initial state
    var filename = "" : String -- args(1)
    var numSolvers = 4
    var iterations = 1 -- Number of times to spin before a solver checks for new clauses and invokes GC
    var ccLength = 10 -- Maximum length of shared clauses
    var ccNumber = -1 -- Maximum number of clauses to send per solver
    var ccM = -1 -- Only send every ccM clause, -1 means sending all elegible clauses
    var a = 1
    var restarts = -1 -- Number of conflicts before restarting, < 0 means no restars
    var heuristics = new LinearQueue[Heuristic]()

    var valsFactory = new ValueFactory()
    var customVals = new Vector[TValueSelection](1)

    var varsFactory = new VariableFactory()
    var customVars = new Vector[TVariableSelection](1)

    -- Update state via command line
    while (a < |args|) do
        if args(a).equals("-s") then
          if a + 1 < |args| then
            numSolvers = this.stringToInt(args(a + 1))
            a = a + 1
          else
            print("Missing argument for -s")
          end

          if args(a + 1).equals("-heu") then
            a = a + 1
            repeat i <- numSolvers do
              if a + 2 >= |args| then
                print("Missing arguments for -heu, exiting.\n")
                abort("")
              end
              customVals.push(valsFactory.get(this.stringToInt(args(a + 1))))
              customVars.push(varsFactory.get(this.stringToInt(args(a + 2))))
              a = a + 2
            end
          end
        else if args(a).equals("-i") then
          if (a + 1 < |args|) then
            iterations = this.stringToInt(args(a + 1))
            a = a + 1
          else
            println("Missing argument for -i")
          end
        else if args(a).equals("-ccl") then
          if a + 1 < |args| then
            ccLength = this.stringToInt(args(a + 1))
            a = a + 1
          else
            println("Missing argument for -ccl")
          end
        else if args(a).equals("-ccn") then
          if a + 1 < |args| then
            ccNumber = this.stringToInt(args(a + 1))
            a = a + 1
          else
            println("Missing argument for -ccn")
          end
        else if args(a).equals("-ccm") then
          if a + 1 < |args| then
            ccM = this.stringToInt(args(a + 1))
            a = a + 1
          else
            println("Missing argument for -ccm")
          end
        else if args(a).equals("-r") then
          if a + 1 < |args| then
            restarts = this.stringToInt(args(a + 1))
            a = a + 1
          else
            print("Missing argument for -r")
          end
        else
          if |args| - 1 == a then
            filename = args(a)
          else
            println("Wrong arguments, exiting.")
            println("{}", "Usage: ")
            println("{}", args(0))
            println(" [-s nsolvers [-heu val1 var1 val2 var2 ...] | -i niter | -ccl len | -ccn num | -ccm num | -r restart ] filename")
            abort("")
          end
        end
        a = a + 1
    end
    if (numSolvers <= 0) then
      println("Illegal number of solver: {}, exiting.\n", numSolvers)
      abort("")
    end
    if (iterations <= 0) then
      println("Illegal number of iterations: {}, exiting.\n", iterations)
      abort("")
    end
    if (ccLength < -1) then
      println("Illegal conflict clause max length: {}, exiting.\n", ccLength)
      abort("")
    end
    if (ccNumber < -1) then
      println("Illegal conflict clause maximum number: {}, exiting.\n", ccNumber)
      abort("")
    end
    if (ccM < -1) then
      println("Illegal conflict clause quantity number: {}, exiting.\n", ccM)
      abort("")
    end
    if (filename.equals("")) then
      print("No input file specified, exiting.")
      abort("")
    end

    -- Parsing phase. new method
    val parser = (new Parser(filename)).parseFile()

    var clauses = parser.getClauses()
    var nVars = parser.getnVariables()

    -- Set up heuristics
    repeat i <- customVals.size() do
      heuristics.enqueue(Just(new Heuristic(customVals.at(i), customVars.at(i), nVars, clauses)))
    end
    this.setupHeuristics(heuristics, clauses, nVars, consume valsFactory, consume varsFactory)

    WAMP("Creating Solver")
    var varsToAssign = this.preProcess(clauses, nVars)

    val foundSolution = new Solution()

    val solvers = new [Proxy](numSolvers)
    val futs = new [Fut[Maybe[(int, int, FinalAssignment)]]](numSolvers)
    val observable = new Observable[Clause]()
    repeat i <- numSolvers do
      solvers(i) = new Proxy(parser.getClauses(), parser.getnVariables(), varsToAssign, unjustH(heuristics.dequeue()), i, ccLength, iterations, ccNumber, ccM, restarts, foundSolution, observable)
    end
    repeat i <- numSolvers do
      val solver = solvers(i)
      WAMP("Calling Start")
      futs(i) = solver!start()
      futs(i) ~~> fun (sol : Maybe[(int, int, FinalAssignment)])
                    match sol with
                      case Nothing => ()
                      case Just((ownConflicts, receivedConflicts, assignments)) =>
                        do
                          assignments.toString()
                          println("Number of own conflicts: {}, number of received conflicts {}",
                                  ownConflicts, receivedConflicts)
                          println("")
                        end
                      end
                    end
                  end
    end

    WAMP("Out the bottom")
  end
end
