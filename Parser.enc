module Parser

import VVector
import Clause
import Array

EMBED
#include <stdio.h>
//#include <math.h>
int64_t n_variables;
int64_t n_clauses;
int64_t **clause_list;
int64_t *clause_size;

int64_t read_file(char *input_file_name);
int64_t get_n_variables();
int64_t get_n_clauses();
int64_t get_clause_size(int64_t clause);
int64_t get_literal(int64_t clause, int64_t literal_number);

BODY

    // Using log10 gives compilation error on linux (not on osx)
    int64_t num_chars(int64_t num) {
      int sign = 0;
      if (num < 0) {
        sign = 1;
        num = -num;
      }
      if (num<10) return sign + 1;
      if (num<100) return sign + 2;
      if (num<1000) return sign + 3;
      if (num<10000) return sign + 4;
      if (num<100000) return sign + 5;
      if (num<1000000) return sign + 6;
      if (num<10000000) return sign + 7;
      if (num<100000000) return sign + 8;
      if (num<1000000000) return sign + 9;
      return -1;
    }

    int64_t read_file(char *input_file_name) {
        char *file_contents;
        long input_file_size;
        FILE *input_file = fopen(input_file_name, "rb");
        if (!input_file) {
          printf("Cannot open file: %s, exiting.\n", input_file_name);
          exit(0);
        }
        size_t n_bytes = 2048;
        char *first_line =  (char*) malloc(sizeof(char) * n_bytes);
        if (!first_line) {
          printf("Memory allocation error, exiting.\n");
          exit(0);
        }
        size_t bytes_read = 0;
        do{
          bytes_read = getline(&first_line, &n_bytes, input_file);
        }while(first_line[0] == 'c');

        n_variables = atoi(first_line +  6);
        int64_t offset = num_chars(n_variables);
        n_clauses = atoi(first_line + 6 + offset);
        clause_list = (int64_t**) malloc( sizeof(int64_t) * n_clauses);
        clause_size = (int64_t *) malloc( sizeof(int64_t) * n_clauses);

        char line[2048];
        int64_t current_clause = 0;
        while (fgets(line, sizeof(line), input_file) != NULL)
        {
            int64_t index = 1;
            int64_t n_literals = 0;
            while(line[index] != '\n' && line[index] != EOF) {

                if(line[index] == ' ' && line[index - 1] != ' ') {
                    n_literals++;
                }
                index++;
            }
            clause_list[current_clause] = (int64_t*) malloc(sizeof(int64_t) * n_literals);
            clause_size[current_clause] = n_literals;

            int64_t current;
            index = 0;
            int64_t count_vars = 0;
            while(line[index] != '\n' && line[index] != EOF) {

                if(line[index] != ' ') {
                    current = atoi(line + index);
                    if(current == 0) {
                        break;
                    }
                    if(current <  0) {
                      clause_list[current_clause][count_vars] = llabs(current * 2) - 1;
                    } else {
                      clause_list[current_clause][count_vars] = (current - 1) * 2;
                    }
                    index += num_chars(current);
                    count_vars++;
                } else {
                    index++;
                }
            }
            current_clause++;
        }
        return 1;
    }

    int64_t get_n_variables() {
        return n_variables;

    }
    int64_t get_n_clauses() {
        return n_clauses;
    }
    int64_t get_clause_size(int64_t clause) {
        return clause_size[clause];

    }
    int64_t get_literal(int64_t clause, int64_t literal_number) {
        return clause_list[clause][literal_number];

    }
END

local class Parser
  var clauses : RVector[Clause]
  var nvariables : int
  val file : String

  def init(file_ : String) : unit
    this.file = file_
  end

  def parseFile() : Parser
    val newfile = this.file.data
    val filecontent = EMBED (int) read_file(#{newfile}); END
    val n_clauses = EMBED (int) get_n_clauses(); END
    var clauses = new VVector[Clause](1)
    val n_variables = EMBED (int) get_n_variables(); END

    repeat i <- n_clauses do
      val variables_in_clause = EMBED (int) get_clause_size(#{i}); END
      var clause = new Array[int](variables_in_clause)
      repeat j <- variables_in_clause  do
        clause.set(j, EMBED (int) get_literal(#{i},#{j}); END)
      end
      clauses.push(new Clause(consume clause))
    end
    this.nvariables = n_variables
    this.clauses = consume clauses
    return this
  end

  def getClauses() : RVector[Clause]
    this.clauses
  end

  def getnVariables() : int
    this.nvariables
  end
end
