module Solver

import VVector
import Clause
import Main
import Heuristic
import CDCL
import Assignments
import Util
import Array

active class Solver
  val n_vars : int
  -- cdcl: each CDCL shares clauses and heuristics.
  val cdcl : CDCL
  val master : Main  -- actor
  val solverId : int
  val iterations : int -- How long to spin before calling itself with a message
  val ccLength : int
  val restartCounterMax : int
  val ccNum : int -- How many conflict clauses to send
  val ccM : int

  var ccSent : int = 0
  var ccCounter : int = -1
  var restartCounter : int = 0

  -- TODO: varsToAssign is a read-only array
  def init(clauses : RVector[Clause], n_vars : int, varsToAssign : RArray[int],
           var heuristic : Heuristic, master : Main, solverId : int,
           ccLength : int, iterations : int, ccNumber : int, ccM : int,
           restart : int) : unit
    this.n_vars = n_vars
    this.master = master
    this.cdcl = new CDCL(clauses, this.n_vars, varsToAssign, consume heuristic, solverId)
    this.solverId = solverId
    this.ccLength = ccLength
    this.iterations = iterations
    this.ccNum = ccNumber
    this.ccM = ccM
    this.restartCounterMax = restart
  end

  def start() : Maybe[(int, int, Array[int])]
    val solveable = Nothing : Maybe[bool]
    val done = false
    WAMP("Started Solver.")
    this.loop(solveable, done)
  end

  -- TODO: some work to elimate the gets
  def finishLoop(solveable : Maybe[bool]) : Maybe[(int, int, Array[int])]
    if not get(this.master!getIsSolved()) then
      match solveable with
        case Just(false) => println("Problem found unsatisfiable by solver {}", this.solverId)
        case Just(true) =>
          do
            this.master!setSolved()
            println("Satisfiable!")
            val correct = this.cdcl.checkCorrectness()
            if correct then
              println("Solution is correct, and was found by solver number {}:", this.solverId)
              this.cdcl.variableValueSelectionPrint()
            else
              println("Solution is incorrect.")
            end

            val conflicts = this.cdcl.getAllConflicts()
            return Just((conflicts.0, conflicts.1, this.cdcl.getFinalAssignments()))
          end
        end
        case Nothing => abort("Error: entered in finishLoop but no result was found")
      end
    end
    Nothing
  end

  -- TODO: much work to eliminate the gets
  def loop(var solveable : Maybe[bool], var done : bool) : Maybe[(int, int, Array[int])]
    WAMP("Starting Loop.")
    var i = 0
    while (i < this.iterations) do
      WAMP("Iterating")
      -- TODO: bad design. blocking in a while loop...
      if isUnknown(solveable) && not get(this.master!getIsSolved()) then
        val res = this.cdcl.solve()
        solveable = res.0
        if res.1 then -- conflict
          if this.ccNum == -1 || this.ccSent < this.ccNum then
            val conflictClause = this.cdcl.getLatestConflictClause()
            if this.ccLength == -1 || conflictClause.size() <= this.ccLength then
              this.ccCounter += 1
              if this.ccCounter % this.ccM == 0 then
                this.master ! addConflictClause(conflictClause, this.solverId)
                this.ccSent += 1
              end
            end
          end

          -- Considers restarting the process. this is done to start all over
          -- from 0 but keeping the accumulated knowledge from the learnt clauses.
          this.restartCounter += 1
          if this.shouldRestart() then
            this.applyRestart()
          end
        end
      else
        return this.finishLoop(solveable)
      end
      i += 1
    end
    WAMP("Out bottom of iteration")
    if not get(this.master!getIsSolved()) then
      this.suspend()
      this.loop(solveable, done) -- send message to self to allow gc,
                                   -- and addConflictClause to run
    else
      Nothing
    end
  where
    fun isUnknown(solveable: Maybe[bool]): bool
      match solveable with
        case Nothing => true
        case Just(x) => false
      end
    end
  end

  def private shouldRestart(): bool
    this.restartCounter == this.restartCounterMax
  end

  def private applyRestart(): unit
    this.restartCounter = 0
    this.cdcl.restart()
  end

  def addConflictClause(conflictClause : Clause) : unit
    this.cdcl.addConflictClause(conflictClause)
  end
end
