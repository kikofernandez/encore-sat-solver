module Solver

import VVector
import Clause
import Main
import Heuristic
import CDCL
import Assignments
import Util
import Array

active class Solver
  val n_vars : int
  -- cdcl: each CDCL shares clauses and heuristics.
  val cdcl : CDCL
  val master : Main  -- actor
  val solverId : int
  val iterations : int -- How long to spin before calling itself with a message
  val ccLength : int
  val restartCounterMax : int
  val ccNum : int -- How many conflict clauses to send
  val ccM : int

  var ccSent : int = 0
  var ccCounter : int = -1
  var restartCounter : int = 0

  -- TODO: varsToAssign is a read-only array
  def init(clauses : RVector[Clause], n_vars : int, varsToAssign : RArray[int],
           var heuristic : Heuristic, master : Main, solverId : int,
           ccLength : int, iterations : int, ccNumber : int, ccM : int,
           restart : int) : unit
    this.n_vars = n_vars
    this.master = master
    this.cdcl = new CDCL(clauses, this.n_vars, varsToAssign, consume heuristic, solverId)
    this.solverId = solverId
    this.ccLength = ccLength
    this.iterations = iterations
    this.ccNum = ccNumber
    this.ccM = ccM
    this.restartCounterMax = restart
  end

  def start() : unit
    val solveable = true
    val done = false
    WAMP("Started Solver.")
    this.loop(solveable, done)
  end

  -- TODO: some work to elimate the gets
  def finishLoop(solveable : bool) : unit
    if not get(this.master!getIsSolved()) then
      if solveable then
        this.master!setSolved()
        println("Satisfiable!")
        val correct = get(this.cdcl!checkCorrectness())
        if correct && solveable then
          println("Solution is correct, and was found by solver number {}:", this.solverId)
	  -- TODO: make this one call!
          get(this.cdcl!variableSelectionToString())
          get(this.cdcl!valueSelectionToString())
        else
          println("Solution is incorrect.")
        end

	-- TODO: make these one call (probably just return all results
	-- from CDCL in one object)
        val conflicts = get(this.cdcl!getAllConflicts())
        val assignments = get(this.cdcl!getAssignments())
        val nSetVars = get(this.cdcl!getSetVars())
        assignments.toString()
        println("Number of own conflicts: {}, number of received conflicts {}", conflicts.0, conflicts.1)
        println("")
      else
        println("Problem found unsatisfiable by solver {}", this.solverId)
      end
    end
  end

  -- TODO: much work to eliminate the gets
  def loop(var solveable : bool, var done : bool) : unit
    WAMP("Starting Loop.")
    var i = 0
    var shouldEnd = false
    while (i < this.iterations) do
      WAMP("Iterating")
      -- TODO: bad design. blocking in a while loop...
      if solveable && not done && not get(this.master!getIsSolved()) then
        val res = get(this.cdcl!solve())
        solveable = res.0
        done = res.1
        if res.2 then
          if this.ccNum == -1 || this.ccSent < this.ccNum then
            val conflictClause = get(this.cdcl!getLatestConflictClause())
            if this.ccLength == -1 || conflictClause.size() <= this.ccLength then
              this.ccCounter += 1
              if this.ccCounter % this.ccM == 0 then
                this.master ! addConflictClause(conflictClause, this.solverId)
                this.ccSent += 1
              end
            end
          end
          this.restartCounter += 1
          if this.restartCounter == this.restartCounterMax then
            this.restartCounter = 0
            this.cdcl!restart()
          end
        end
      else
        i = this.iterations -- break
        shouldEnd = true
        this.finishLoop(solveable)
      end
      i = i + 1
    end
    WAMP("Out bottom of iteration")
    if not shouldEnd then
      val solver = this
      solver ! loop(solveable, done) -- send message to self to allow gc,
                                     -- and addConflictClause to run
    end
  end

  def addConflictClause(conflictClause : Clause) : unit
    this.cdcl!addConflictClause(conflictClause)
  end
end
