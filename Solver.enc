module Solver

import VVector
import Clause
import Main
import Heuristic
import CDCL
import Assignments
import Util
import Array
import SharedQueue

active class Solver
  val n_vars : int
  -- cdcl: each CDCL shares clauses and heuristics.
  val cdcl : CDCL
  val master : Main  -- actor
  val solverId : int
  val iterations : int -- How long to spin before calling itself with a message
  val ccLength : int
  val restartCounterMax : int
  val ccNum : int -- How many conflict clauses to send
  val ccM : int
  val foundSolution : Solution

  var ccSent : int = 0
  var ccCounter : int = -1
  var restartCounter : int = 0

  -- TODO: varsToAssign is a read-only array
  def init(clauses : RVector[Clause], n_vars : int, varsToAssign : RArray[int],
           var heuristic : Heuristic, master : Main, solverId : int,
           ccLength : int, iterations : int, ccNumber : int, ccM : int,
           restart : int, val foundSolution: Solution) : unit
    this.n_vars = n_vars
    this.master = master
    this.cdcl = new CDCL(clauses, this.n_vars, varsToAssign, consume heuristic, solverId)
    this.solverId = solverId
    this.ccLength = ccLength
    this.iterations = iterations
    this.ccNum = ccNumber
    this.ccM = ccM
    this.restartCounterMax = restart
    this.foundSolution = foundSolution
  end

  def private finishLoop(solveable : Maybe[bool]) : Maybe[(int, int, FinalAssignment)]
    val hasSolution = match solveable with
                        case Nothing      => abort("Error on finishLoop")
                        case Just(true)   => true
                        case Just(false)  => false
                      end
    -- has solution and can atomically set it to true, then I am the solver!
    if hasSolution && this.foundSolution.setSolved() then
        println("Satisfiable!")
        if this.cdcl.checkCorrectness() then
          println("Solution is correct, and was found by solver number {}:", this.solverId)
          this.cdcl.variableAndValueSelectionPrintout()
        else
          println("Solution is incorrect.")
        end

        val conflicts = this.cdcl.getAllConflicts()
        val assignments = this.cdcl.getAssignments()
        return Just((conflicts.0, conflicts.1, assignments))
    else if (not hasSolution) then
      println("Problem found unsatisfiable by solver {}", this.solverId)
      return Nothing : Maybe[(int, int, FinalAssignment)]
    else
      return Nothing
    end
  end

  def start(var solveable : Maybe[bool] = Nothing, var solved : bool = false) : Maybe[(int, int, FinalAssignment)]
    WAMP("Starting Loop.")
    repeat i <- this.iterations do
      WAMP("Iterating")
      solved = this.foundSolution.getIsSolved()

      if isNothing(solveable) && not solved then
        val res = this.cdcl.solve()
        solveable = maybe(res.0, solved)
        this.handleConflict(res.1)
      else if not isNothing(solveable) && not solved then
          return this.finishLoop(solveable)
      else
        return Nothing
      end
    end
    var futResult = this!start(solveable)
    await(futResult)
    return get(futResult)
  where
    fun maybe(solveable: Maybe[bool], default : bool) : Maybe[bool]
      if default then
        return Just(true)
      else
        match solveable with
          case Just(x) => return Just(x || default)
          case Nothing => return Nothing
        end
      end
    end

    fun isNothing(solveable: Maybe[bool]): bool
      match solveable with
        case Nothing   => true
        case otherwise => false
      end
    end
  end

  def private handleConflict(conflict: bool): unit
    if conflict then -- conflict
      if this.ccNum == -1 || this.ccSent < this.ccNum then
        val conflictClause = this.cdcl.getLatestConflictClause()
        if this.ccLength == -1 || conflictClause.size() <= this.ccLength then
          this.ccCounter += 1
          if this.ccCounter % this.ccM == 0 then
            this.master ! addConflictClause(conflictClause, this.solverId)
            this.ccSent += 1
          end
        end
      end

      -- Considers restarting the process. this is done to start all over
      -- from 0 but keeping the accumulated knowledge from the learnt clauses.
      this.restartCounter += 1
      if this.shouldRestart() then
        this.applyRestart()
      end
    end
  end

  def private shouldRestart(): bool
    this.restartCounter == this.restartCounterMax
  end

  def private applyRestart(): unit
    this.restartCounter = 0
    this.cdcl.restart()
  end

  def addConflictClause(conflictClause : Clause) : unit
    this.cdcl.addConflictClause(conflictClause)
  end
end
