module Vector

import Array

local class Vector[t]
-- private attributes
  var arraySize : int
  var nElements : int
  var array : [t]

  def init(arraySize_ : int) : unit
      this.arraySize = arraySize_
      this.array = new [t](this.arraySize)
      this.nElements = 0
  end

-- public methods
  def clone() : Vector[t]
    val newVector = new Vector[t](this.nElements)
    repeat i <- this.nElements do
      newVector.push(this.array(i))
    end
    newVector
  end

  def set(index : int, value : t) : unit
    if (not this.inBounds(index)) then
        println("Error: Vector set index out of bounds for index {}. Exiting.\n", index)
        exit(-1)
    end
    this.array(index) = value
  end

  def at(index : int) : t
    if (not this.inBounds(index)) then
        println("Error: Vector at index out of bounds for index {}. Exiting.\n", index)
        exit(-1)
    end
    this.array(index)
  end

  def remove(index : int) : unit
    if (not this.inBounds(index)) then
        println("Error: Vector remove index out of bounds for index {}. Exiting.\n", index)
        exit(-1)
    end
    var i = index
    var iLimit = this.nElements - 1
    while (i < iLimit) do
      this.array(i) = this.array(i+1)
      i = i + 1
    end
    this.nElements = this.nElements-1
  end

  def size() : int
    this.nElements
  end

  def push(object : t) : unit
    if (this.nElements == this.arraySize) then
      this.realloc(this.arraySize*2)
    end
    this.array(this.nElements) = object
    this.nElements = this.nElements+1
  end

  def pop() : t
    if (this.nElements < 1) then
      println("Error: Vector is empty, pop failed. Exiting.\n")
      exit(-1)
    end
    this.nElements = this.nElements-1
    this.array(this.nElements)
  end

{-
  def toArray() : Array[t]
    var newArray = new Array[t](this.nElements)
    repeat i <- this.nElements do
      newArray.set(i, this.array(i))
    end
    consume newArray
  end
-}
  def toArray() : [t]
    var newArray = new [t](this.nElements)
    repeat i <- this.nElements do
      newArray(i) = this.array(i)
    end
    newArray
  end

  -- DEBUG method
  def toString() : unit
    println("Vector: ")
    repeat i <- this.nElements do
      print("")
    end
  end

-- private methods
  def private inBounds(index : int) : bool
    (index >= 0) && (index < this.nElements)
  end

  def private realloc(newSize : int) : unit
    val newArray = new [t](newSize)
    repeat i <- this.arraySize do
      newArray(i) = this.array(i)
    end
    this.arraySize = newSize
    this.array = newArray
  end
end
